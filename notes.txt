/* insomnia - meant to do things we could do in JS or command line.
is a sandbox to send requests to API. Practice here first. 
internet of things - where you can connect to things like location sensors, 
weather sensors, etc. 
dropped API end-point in insomnia - the url
add ID to url - in insomnia
blah blah don't know what happened - see slack message
fetch takes a url, look at structure of url and see where 
to put a template literal (changing ids)*/

// GET = show us some data from your database 
// .then = wait until there's a response
// return response.json() - computer reads it/parses it
// .response - whatever you get from code immediately before it


// fetch request: `https://openexchangerates.org/api/latest.json?app_id=APP_ID&base=BASE_CURRENCY`
// `BASE_CURRENCY` is a placeholder for the base currency code
// `APP_ID` is placeholder for access key - d176522a23eb485885d8f97ffb0cf101

// User flow
// user chooses target currency from dropdown
// user inputs $ amount to convert to target currency (via text)
// user clicks convert button

// JS/API flow
    // "chooses target currency" - reads target currency
    // event listener - update user interface
    // "clicks to change $ amount" - reads the new dollar amount
    // event listener - update user interface
    // "clicks convert button" - read the base and target currencies from dropdown
    // makes a fetch request? 
    // wait on response
    // use response to update user interface to show target currency amount
    

// need to incorporate 
    // dropdown list of currencies - use currencies.js file in this repo

// event listeners
    // convert button "click"
    // choose currency - update user interface
    // changes $ amount - update user interface


/ unexpected end of input
// method: "GET"
// headers: {'Content-Type': "application/json"}

//.then((response) => {
    //return response.json()
// })

// .then((parsedResponse) => {
//     let login = 
// })

// use for loops - they faster

//let url = url endpoint

// create element needs to be in .then statement - seperate .then statement
// .then - dont try what's in these curly braces until what's above it has completed
// .then((userData)) => {
//     createusercrd(userData)
// }
// fetch only once

// unexpected end of input
// strategies - break points
// what if it's specific to this API? 

/* in JS there are two ways to write functions
function equals(a, b) {
    return equals a === b; 
}
function with a name above

no name (anon below)
mainContainer.addevenlistener((event, b) => {
    return event.target
})
mainContainer.addEventListener(function (event, b) {
    return  event.target
})
doesn't need a name because it's in an event listener

call back - function also doesn;t have to have a name

can use arrow notation for no name (anon) functions
let arrjowFunction = (a, b) => {
    return a === b; 
}